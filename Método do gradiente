{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled10.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMUlEei4/Z1vb/h7Q2EDNft",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Beatrizvferreira/Otimizacao/blob/master/M%C3%A9todo%20do%20gradiente\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6cS9LK5UT6Xa",
        "outputId": "fd616e48-e210-42fc-f22e-5157db67ae92"
      },
      "source": [
        "!pip install numpy"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (1.19.5)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U49_vxX_T-GK"
      },
      "source": [
        "import numpy as np\n",
        "from numpy import linalg as la"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZHbvnBJgXBRY",
        "outputId": "53d66616-95d4-4cea-d9e9-77d83283d169"
      },
      "source": [
        "def grad(X):\n",
        "    A = np.multiply(X,[2,4])\n",
        "    return A\n",
        "    \n",
        "def metgradconst(X,t):\n",
        "    tol=np.float(0.000001)\n",
        "    cont=0\n",
        "    while (la.norm(grad(X))> tol):\n",
        "        cont= cont+1\n",
        "        X=X - t*grad(X)\n",
        "    f = X[0]**2 + 2*X[1]**2\n",
        "    print(\"X = \",X)\n",
        "    print(\"f = \",f)\n",
        "    print(\"g = \",grad(X))\n",
        "    print(\"Iteracoes = \",cont)\n",
        "    \n",
        "X= np.array([1,2])\n",
        "metgradconst(X,0.495)"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X =  [ 0.00000000e+00 -2.48857977e-07]\n",
            "f =  1.2386058502993438e-13\n",
            "g =  [ 0.00000000e+00 -9.95431906e-07]\n",
            "Iteracoes =  787\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}